time.taken <- end.time - start.time
time.taken
units( time.taken ) <- "secs"
time.taken
for( i in 1:5){
X <- generateD(100, allP[i])$X
Y <- generateD(100, allP[i])$Y
start.time <- Sys.time()
obj <- basad( x = X[, 2:ncol(X)], y = Y, niter = 2000, Fast = FALSE)
end.time <- Sys.time()
time.taken <- end.time - start.time
units( time.taken ) <- "secs"
computeTime[i] <- second( time.taken )
}
for( i in 1:5){
X <- generateD(100, allP[i])$X
Y <- generateD(100, allP[i])$Y
start.time <- Sys.time()
obj <- basad( x = X[, 2:ncol(X)], y = Y, niter = 2000, Fast = FALSE)
end.time <- Sys.time()
time.taken <- end.time - start.time
units( time.taken ) <- "secs"
computeTime[i] <-  time.taken
}
computeTime
for( i in 1:5){
X <- generateD(100, allP[i])$X
Y <- generateD(100, allP[i])$Y
start.time <- Sys.time()
obj <- basad( x = X[, 2:ncol(X)], y = Y, niter = 2000, Fast = TRUE)
end.time <- Sys.time()
time.taken <- end.time - start.time
units( time.taken ) <- "secs"
computeTime[i] <-  time.taken
}
computeTime
library("spikeslab")
spikeslab()
for( i in 1:5){
X <- generateD(100, allP[i])$X
Y <- generateD(100, allP[i])$Y
start.time <- Sys.time()
obj <- spikeslab( X = X, Y = Y, n.iter2 = 2000)
end.time <- Sys.time()
time.taken <- end.time - start.time
units( time.taken ) <- "secs"
computeTime[i] <-  time.taken
}
for( i in 1:5){
X <- generateD(100, allP[i])$X
Y <- generateD(100, allP[i])$Y
start.time <- Sys.time()
obj <- spikeslab( x = X, y = Y, n.iter2 = 2000)
end.time <- Sys.time()
time.taken <- end.time - start.time
units( time.taken ) <- "secs"
computeTime[i] <-  time.taken
}
for( i in 1:5){
X <- generateD(100, allP[i])$X
Y <- generateD(100, allP[i])$Y
start.time <- Sys.time()
obj <- spikeslab( x = X, y = Y, n.iter2 = 2000, verbose = TRUE)
end.time <- Sys.time()
time.taken <- end.time - start.time
units( time.taken ) <- "secs"
computeTime[i] <-  time.taken
}
for( i in 1:5){
X <- generateD(100, allP[i])$X
Y <- generateD(100, allP[i])$Y
start.time <- Sys.time()
obj <- spikeslab( x = X, y = Y, n.iter2 = 2000, bigp.smalln = TRUE, verbose = TRUE)
end.time <- Sys.time()
time.taken <- end.time - start.time
units( time.taken ) <- "secs"
computeTime[i] <-  time.taken
}
computeTime
for( i in 1:5){
X <- generateD(100, allP[i])$X
Y <- generateD(100, allP[i])$Y
start.time <- Sys.time()
obj <- spikeslab( x = X, y = Y, n.iter2 = 2000, bigp.smalln = TRUE, verbose = TRUE)
end.time <- Sys.time()
time.taken <- end.time - start.time
units( time.taken ) <- "secs"
computeTime[i] <-  time.taken
}
computeTime
for( i in 1:5){
print(i)
X <- generateD(100, allP[i])$X
Y <- generateD(100, allP[i])$Y
start.time <- Sys.time()
obj <- spikeslab( x = X, y = Y, n.iter2 = 2000, bigp.smalln = TRUE, verbose = TRUE)
end.time <- Sys.time()
time.taken <- end.time - start.time
units( time.taken ) <- "secs"
computeTime[i] <-  time.taken
}
computeTime
library("blasso")
setwd("~/Documents/research/others")
install.packages("~/Documents/research/others/basad_0.3.tgz", repos = NULL, type="source")
install.packages("~/Documents/research/others/blasso_0.3.tgz", repos = NULL, type="source")
for( i in 1:5){
print(i)
X <- generateD(100, allP[i])$X
Y <- generateD(100, allP[i])$Y
start.time <- Sys.time()
obj <- blasso.vs(  Y = Y, X = X, iters = 2500, burn = 500 )
end.time <- Sys.time()
time.taken <- end.time - start.time
units( time.taken ) <- "secs"
computeTime[i] <-  time.taken
}
library("blasso")
for( i in 1:5){
print(i)
X <- generateD(100, allP[i])$X
Y <- generateD(100, allP[i])$Y
start.time <- Sys.time()
obj <- blasso.vs(  Y = Y, X = X, iters = 2500, burn = 500 )
end.time <- Sys.time()
time.taken <- end.time - start.time
units( time.taken ) <- "secs"
computeTime[i] <-  time.taken
}
obj <- blasso.vs(  Y = Y, X = X, sig2 = 1, tau = 1, iters = 2500, burn = 500 )
obj <- blasso.vs(  Y = Y, X = X, sig2 = 1, tau = 1, phi = 1, iters = 2500, burn = 500 )
obj <- blasso.vs(  Y = Y, X = X, sig2 = 1, tau = 1, phi = 0.5, iters = 2500, burn = 500 )
for( i in 1:5){
print(i)
X <- generateD(100, allP[i])$X
Y <- generateD(100, allP[i])$Y
start.time <- Sys.time()
obj <- basad( x = X[, 2:ncol(X)], y = Y, prior.dist = "t", Fast = TRUE)
#obj <- blasso.vs(  Y = Y, X = X, sig2 = 1, tau = 1, phi = 0.5, iters = 2500, burn = 500 )
end.time <- Sys.time()
time.taken <- end.time - start.time
units( time.taken ) <- "secs"
computeTime[i] <-  time.taken
}
obj <- basad( x = X[, 2:ncol(X)], y = Y, niter = 2000, prior.dist = "t", Fast = TRUE)
obj <- blasso.vs(  Y = Y, X = X, sig2 = 1, tau = 1, phi = 0.5, iters = 2500, beta.prior = "scaled",
sig2prior = c(1,3), tauprior = c(2,3),  phiprior = c(1,5) )
ncol(X)
obj <- blasso.vs(  Y = Y, X = X, beta = rep(1, 200 ), sig2 = 1, tau = 1, phi = 0.5, iters = 2500, beta.prior = "scaled",
sig2prior = c(1,3), tauprior = c(2,3),  phiprior = c(1,5) )
obj$beta
for( i in 1:5){
print(i)
X <- generateD(100, allP[i])$X
Y <- generateD(100, allP[i])$Y
ncol(X)
start.time <- Sys.time()
obj <- basad( x = X[, 2:ncol(X)], y = Y, niter = 2000, prior.dist = "t", Fast = TRUE)
obj <- blasso.vs(  Y = Y, X = X, beta = rep(1, 200 ), sig2 = 1, tau = 1, phi = 0.5, iters = 2500, beta.prior = "scaled",
sig2prior = c(1,3), tauprior = c(2,3),  phiprior = c(1,5) )
e
end.time <- Sys.time()
time.taken <- end.time - start.time
units( time.taken ) <- "secs"
computeTime[i] <-  time.taken
}
for( i in 1:5){
print(i)
X <- generateD(100, allP[i])$X
Y <- generateD(100, allP[i])$Y
ncol(X)
start.time <- Sys.time()
#obj <- basad( x = X[, 2:ncol(X)], y = Y, niter = 2000, prior.dist = "t", Fast = TRUE)
obj <- blasso.vs(  Y = Y, X = X, beta = rep(1, 200 ), sig2 = 1, tau = 1, phi = 0.5, iters = 2500, beta.prior = "scaled",
sig2prior = c(1,3), tauprior = c(2,3),  phiprior = c(1,5) )
end.time <- Sys.time()
time.taken <- end.time - start.time
units( time.taken ) <- "secs"
computeTime[i] <-  time.taken
}
computeTime
obj <- blasso.vs(  Y = Y, X = X, beta = rep(1, allP[i] ), sig2 = 1, tau = 1, phi = 0.5, iters = 2500, beta.prior = "scaled",
sig2prior = c(1,5), tauprior = c(1,5), phiprior = c(1,5) )
obj$beta
obj$
end.time <- Sys.time()
obj$sig2prior
obj$end.time
computeTime
getC22 <- function( res, med, ){
res[1] <- pp0(med)
res[2] <- pp1(med)
res[3] <- cExact(med)
res[4] <- cInclu(med)
res[5] <- testFDR(med)
return( res )
}
getC22 <- function( res, med ){
res[1] <- pp0(med)
res[2] <- pp1(med)
res[3] <- cExact(med)
res[4] <- cInclu(med)
res[5] <- testFDR(med)
return( res )
}
getC33 <- function( res, med ){
res[1] <- pp0(med)
res[2] <- pp1(med)
res[3] <- cExact(med)
res[4] <- cInclu(med)
res[5] <- testFDR(med)
return( res )
}
getC44 <- function(res, med){
res[1] <- pp0(med)
res[2] <- pp1(med)
res[3] <- cExact(med)
res[4] <- cInclu(med)
res[5] <- testFDR(med)
return(res)
}
setwd("~/Documents/research/SimRes/0827/gaussian")
> setwd("~/Documents/research/SimRes/0827/gaussian/case1")
setwd("~/Documents/research/SimRes/0827/gaussian/case1")
setwd("~/Documents/research/SimRes/0827/gaussian/case2")
setwd("~/Documents/research/SimRes/0827/gaussian/case3")
setwd("~/Documents/research/SimRes/0827/gaussian/case4")
setwd("~/Documents/research/SimRes/0827/gaussian/case1")
print( load( fileZ) )
res.Z[[1]]
fileZ <- list.files( pattern = ".Z.Rdata")
print( load( fileZ) )
res.Z[[1]]
res.Z
Zmed <- matrix(0,nrow = 200, ncol = 100)
for( i in 1:200 ){
Zmed[i, res.Z[[i]] ] <- 1
}
Zmed
res1 <- numeric(6)
getC1( res1, Zmed )
getC1 <- function( res, med){
res[1] <- pp0(med)
res[2] <- pp1(med)
res[3] <- cExact(med)
res[4] <- cInclu(med)
res[5] <- testFDR(med)
return( res )
}
getC1( res1, Zmed )
pp0 <-function(medmodel){
return( mean( apply( medmodel,2,mean )[7:ncol(medmodel)] ) )
}
getMed <- function(ourZ){
medModel <- ( ourZ > 0.5)
return(medModel)
}
pp1 <- function(medmodel){
return( mean( apply( medmodel,2,mean )[2:6] ) )
}
cExact <- function(medmodel){
countExact = 0
for( i in 1:nrow(medmodel) ){
if( ( sum( medmodel[i,2:6] ) == 5 ) && ( sum( medmodel[i, 7:ncol(medmodel)] ) == 0 )  )
countExact = countExact + 1
}
return( countExact/nrow(medmodel))
}
getC22 <- function( res, med ){
res[1] <- pp0(med)
res[2] <- pp1(med)
res[3] <- cExact(med)
res[4] <- cInclu(med)
res[5] <- testFDR(med)
return( res )
}
fileZ <- list.files( pattern = ".Z.Rdata")
setwd("~/Documents/research/SimRes/0827/gaussian/case2")
fileZ <- list.files( pattern = ".Z.Rdata")
print( load( fileZ) )
Zmed <- matrix(0,nrow = 200, ncol = 100)
for( i in 1:200 ){
Zmed[i, res.Z[[i]] ] <- 1
}
Zmed
res2 <- numeric(6)
Zmed
Zmed[,2:6]
fileZ <- list.files( pattern = ".Z.Rdata")
print( load( fileZ) )
res.Z[,2:6]
res.Z
for( i in 1:200 ){
Zmed[i, ] <-  res.Z[[i]]
}
setwd("~/Documents/research/SimRes/0827/gaussian/case2")
fileZ <- list.files( pattern = ".Z.Rdata")
print( load( fileZ) )
res.Z
Zmed <- matrix(0,nrow = 200, ncol = 500)
for( i in 1:200 ){
Zmed[i, ] <-  res.Z[[i]]
}
Zmed[,2:6]
res2 <- numeric(6)
getC22( res1, Zmed )
cInclu <- function(medmodel){
count = 0
for( i in 1:nrow(medmodel) ){
if( sum( medmodel[i,2:6] ) == 5 )
count = count + 1
}
return( count/nrow(medmodel) )
}
testFDR <- function(medmodel){
FD <- sum(medmodel[,7:ncol(medmodel)])
partD <- sum( medmodel[,2:6])
return( FD/(partD+FD) )
}
getC22 <- function( res, med ){
res[1] <- pp0(med)
res[2] <- pp1(med)
res[3] <- cExact(med)
res[4] <- cInclu(med)
res[5] <- testFDR(med)
return( res )
}
getC33 <- function( res, med ){
res[1] <- pp0(med)
res[2] <- pp1(med)
res[3] <- cExact(med)
res[4] <- cInclu(med)
res[5] <- testFDR(med)
return( res )
}
getC44 <- function(res, med){
res[1] <- pp0(med)
res[2] <- pp1(med)
res[3] <- cExact(med)
res[4] <- cInclu(med)
res[5] <- testFDR(med)
return(res)
}
res2 <- numeric(6)
getC22( res1, Zmed )
setwd("~/Documents/research/SimRes/0827/gaussian/case1")
fileZ <- list.files( pattern = ".Z.Rdata")
print( load( fileZ) )
Zmed <- matrix(0,nrow = 200, ncol = 100)
for( i in 1:200 ){
Zmed[i, ] <-  res.Z[[i]]
}
Zmed
res1 <- numeric(6)
getC1( res1, Zmed )
res1
getC1 <- function( med){
res <- c()
res[1] <- pp0(med)
res[2] <- pp1(med)
res[3] <- cExact(med)
res[4] <- cInclu(med)
res[5] <- testFDR(med)
return( res )
}
res1 <- getC1( res1, Zmed )
res1 <- getC1(  Zmed )
res1
getC44 <- function( med){
res <- c()
res[1] <- pp0(med)
res[2] <- pp1(med)
res[3] <- cExact(med)
res[4] <- cInclu(med)
res[5] <- testFDR(med)
return(res)
}
getC33 <- function(  med ){
res <- c()
res[1] <- pp0(med)
res[2] <- pp1(med)
res[3] <- cExact(med)
res[4] <- cInclu(med)
res[5] <- testFDR(med)
return( res )
}
getC22 <- function(  med ){
res <- c()
res[1] <- pp0(med)
res[2] <- pp1(med)
res[3] <- cExact(med)
res[4] <- cInclu(med)
res[5] <- testFDR(med)
return( res )
}
setwd("~/Documents/research/SimRes/0827/gaussian/case4")
fileZ <- list.files( pattern = ".Z.Rdata")
print( load( fileZ) )
Zmed <- matrix(0,nrow = 200, ncol = 500)
for( i in 1:200 ){
Zmed[i, ] <-  res.Z[[i]]
}
Zmed[,2:6]
res4 <- getC44( Zmed )
res4
setwd("~/Documents/research/SimRes/0827/gaussian/case3")
fileZ <- list.files( pattern = ".Z.Rdata")
print( load( fileZ) )
Zmed <- matrix(0,nrow = 200, ncol = 500)
for( i in 1:200 ){
Zmed[i, ] <-  res.Z[[i]]
}
Zmed[,2:6]
res3 <- getC33( Zmed )
res3
res3
Zmed[,2:6]
Zmed[,2:10]
Zmed[,2:6]
res3
res2
setwd("~/Documents/research/SimRes/0827/gaussian/case2")
fileZ <- list.files( pattern = ".Z.Rdata")
print( load( fileZ) )
Zmed <- matrix(0,nrow = 200, ncol = 500)
for( i in 1:200 ){
Zmed[i, ] <-  res.Z[[i]]
}
Zmed[,2:6]
res2 <- getC22( Zmed )
res2
res1
gua.res <- <- rbind( res1, res2, res3, res4)
gua.res <- rbind( res1, res2, res3, res4)
gua.res
write.csv( gua.res, file = "gau.res.csv")
setwd("~/Documents/research/SimRes/0827/t/case1")
fileZ <- list.files( pattern = ".Z.Rdata")
print( load( fileZ) )
Zmed <- matrix(0,nrow = 200, ncol = 100)
for( i in 1:200 ){
Zmed[i, ] <-  res.Z[[i]]
}
Zmed
res1 <- getC1(  Zmed )
res1
setwd("~/Documents/research/SimRes/0827/t/case2")
fileZ <- list.files( pattern = ".Z.Rdata")
print( load( fileZ) )
Zmed <- matrix(0,nrow = 200, ncol = 500)
for( i in 1:200 ){
Zmed[i, ] <-  res.Z[[i]]
}
Zmed[,2:6]
res2 <- getC22( Zmed )
res2
setwd("~/Documents/research/SimRes/0827/t/case3")
fileZ <- list.files( pattern = ".Z.Rdata")
print( load( fileZ) )
Zmed <- matrix(0,nrow = 200, ncol = 500)
for( i in 1:200 ){
Zmed[i, ] <-  res.Z[[i]]
}
Zmed[,2:6]
res3 <- getC33( Zmed )
res3
setwd("~/Documents/research/SimRes/0827/t/case4")
fileZ <- list.files( pattern = ".Z.Rdata")
print( load( fileZ) )
Zmed <- matrix(0,nrow = 200, ncol = 500)
for( i in 1:200 ){
Zmed[i, ] <-  res.Z[[i]]
}
Zmed[,2:6]
res4 <- getC44( Zmed )
res4
t.res <- rbind( res1, res2, res3, res4)
write.csv( t.res, file = "t.res.csv")
getwd()
write.csv( gua.res, file = "gau.res.csv")
generateD <- function( n, p ){
n =  n; p = p-1
nz = 5
rho1=0.25;rho2=0.25;rho3=0.25  ### correlation among active, between active and inactive, inactive parts
Bc = c( 0,seq(0.6,3,length.out=nz), array(0, p-nz))
covr1=(1- rho1)*diag(nz) +  array(rho1,c(nz,nz))
covr3=(1- rho3)*diag(p-nz) +  array(rho3,c(p-nz,p-nz))
covr2=array(rho2,c(nz,p-nz))
covr=rbind(cbind(covr1,covr2),cbind(t(covr2),covr3))
###covr = (1- rho)*diag(p) +  array(rho,c(p,p)) #Covariance of covariates
covE = eigen(covr)
covsq = covE$vectors %*% diag(sqrt(covE$values)) %*% t(covE$vectors) #
K = 10   ## An initial reasonable choice for number of covariates in the model
Xs = matrix( rnorm(n*p), nrow = n)
Xn = covsq%*% t(Xs)
X = cbind(array(1, n), t(Xn))
Y = X %*% Bc + rnorm(n)
return( list(X = X, Y = Y))
}
X <- res1$X
Y <- res1$Y
res1 <- generateD(100,500)
X <- res1$X
Y <- res1$Y
obj <- basad( x = X[, 2:ncol(X)], y = Y, niter = 2000, prior.dist = "t", Fast = TRUE)
basad( x = X[, 2:ncol(X)], y = Y, niter = 2000, prior.dist = "t", Fast = TRUE)
library("devtools")
build()
setwd("~/Documents/rpackage/basadGit/basad")
build()
install.packages("~/Documents/package/basadGit/basad_1.0.tar.gz", repos = NULL, type="source")
install.packages("~/Documents/rpackage/basadGit/basad_1.0.tar.gz", repos = NULL, type="source")
